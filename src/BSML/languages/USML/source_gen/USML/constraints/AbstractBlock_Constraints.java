package USML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;

public class AbstractBlock_Constraints extends BaseConstraintsDescriptor {
  public AbstractBlock_Constraints() {
    super("USML.structure.AbstractBlock");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, "com.mbeddr.core.statements.structure.StatementList") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentNode), "USML.structure.IAbstrackBlockContainer");
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "6318815719352828129");
}
