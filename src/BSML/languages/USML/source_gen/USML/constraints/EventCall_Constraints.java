package USML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class EventCall_Constraints extends BaseConstraintsDescriptor {
  public EventCall_Constraints() {
    super("USML.structure.EventCall");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("eventRef", new BaseReferenceConstraintsDescriptor("eventRef", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            final List<SNode> events = new ArrayList<SNode>();
            Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAncestors(_context.getEnclosingNode(), null, false), "USML.structure.IEventScopeProvider")).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                ListSequence.fromList(events).addSequence(Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), it, "virtual_getContainedEvents_2093108837558419581", new Object[]{})));
              }
            });
            return events;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_6fvajr_a0a1a0a0a1a0b0a1a3;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return (SNodeOperations.getAncestor(parentNode, "USML.structure.AbstractBlock", false, false) != null) || (SNodeOperations.getAncestor(parentNode, "USML.structure.Transition", false, false) != null);
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "7466645974729317288");
  private static SNodePointer breakingNode_6fvajr_a0a1a0a0a1a0b0a1a3 = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "6318815719348981860");
}
