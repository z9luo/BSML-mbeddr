package USML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("USML.structure.AbstractBlock").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList").children(new String[]{"content"}, new boolean[]{false}).abstract_().create();
      case 1:
        return new ConceptDescriptorBuilder("USML.structure.AbstractEventDeclaration").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement", "jetbrains.mps.lang.core.structure.INamedConcept", "USML.structure.IEvent", "com.mbeddr.core.base.structure.IContainerOfUniqueNames").children(new String[]{"args"}, new boolean[]{true}).abstract_().create();
      case 2:
        return new ConceptDescriptorBuilder("USML.structure.CFunctionBinding").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("var").alias("", "reference to a C function").create();
      case 3:
        return new ConceptDescriptorBuilder("USML.structure.CreateEventInstance").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression", "com.mbeddr.core.modules.structure.ICallLike").references("statemachine", "event").children(new String[]{"actuals"}, new boolean[]{true}).alias("create_event", "activate an event to trigger state machine").create();
      case 4:
        return new ConceptDescriptorBuilder("USML.structure.DoBlock").super_("USML.structure.AbstractBlock").parents("USML.structure.AbstractBlock").alias("do", "").create();
      case 5:
        return new ConceptDescriptorBuilder("USML.structure.EntryBlock").super_("USML.structure.AbstractBlock").parents("USML.structure.AbstractBlock").alias("entry", "").create();
      case 6:
        return new ConceptDescriptorBuilder("USML.structure.EventArgReference").super_("com.mbeddr.core.modules.structure.ArgumentRef").parents("com.mbeddr.core.modules.structure.ArgumentRef").create();
      case 7:
        return new ConceptDescriptorBuilder("USML.structure.EventCall").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression", "com.mbeddr.core.modules.structure.ICallLike").references("eventRef").children(new String[]{"actuals"}, new boolean[]{true}).create();
      case 8:
        return new ConceptDescriptorBuilder("USML.structure.EventType").super_("com.mbeddr.core.udt.structure.StructType").parents("com.mbeddr.core.udt.structure.StructType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
      case 9:
        return new ConceptDescriptorBuilder("USML.structure.ExitBlock").super_("USML.structure.AbstractBlock").parents("USML.structure.AbstractBlock").alias("exit", "").create();
      case 10:
        return new ConceptDescriptorBuilder("USML.structure.GetEventBinding").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").children(new String[]{"cbinding"}, new boolean[]{false}).alias("GetEventBinding", "").create();
      case 11:
        return new ConceptDescriptorBuilder("USML.structure.IAbstrackBlockContainer").interface_().create();
      case 12:
        return new ConceptDescriptorBuilder("USML.structure.IEvent").interface_().parents("USML.structure.ISMFullNameProvider", "com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 13:
        return new ConceptDescriptorBuilder("USML.structure.IEventScopeProvider").interface_().create();
      case 14:
        return new ConceptDescriptorBuilder("USML.structure.IRegion").interface_().parents("USML.structure.ISMFullNameProvider", "com.mbeddr.core.statements.structure.ILocalVarScopeProvider", "USML.structure.IEventScopeProvider", "USML.structure.IStateScopeProvider", "USML.structure.ITransitionProvider", "com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 15:
        return new ConceptDescriptorBuilder("USML.structure.IRegionScopeProvider").interface_().create();
      case 16:
        return new ConceptDescriptorBuilder("USML.structure.ISMFullNameProvider").interface_().parents("com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 17:
        return new ConceptDescriptorBuilder("USML.structure.IState").interface_().parents("USML.structure.ISMFullNameProvider", "USML.structure.IRegionScopeProvider", "com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 18:
        return new ConceptDescriptorBuilder("USML.structure.IStateMachine").interface_().parents("USML.structure.ISMFullNameProvider", "USML.structure.IRegionScopeProvider", "com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 19:
        return new ConceptDescriptorBuilder("USML.structure.IStateScopeProvider").interface_().create();
      case 20:
        return new ConceptDescriptorBuilder("USML.structure.ITransition").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept", "USML.structure.ISMFullNameProvider", "com.mbeddr.core.base.structure.IIdentifierNamedConcept").create();
      case 21:
        return new ConceptDescriptorBuilder("USML.structure.ITransitionProvider").interface_().create();
      case 22:
        return new ConceptDescriptorBuilder("USML.structure.InEventDeclaration").super_("USML.structure.AbstractEventDeclaration").parents("USML.structure.AbstractEventDeclaration").alias("inevent", "").create();
      case 23:
        return new ConceptDescriptorBuilder("USML.structure.LocalEventDeclaration").super_("USML.structure.AbstractEventDeclaration").parents("USML.structure.AbstractEventDeclaration").alias("local event", "").create();
      case 24:
        return new ConceptDescriptorBuilder("USML.structure.OutEventDeclaration").super_("USML.structure.AbstractEventDeclaration").parents("USML.structure.AbstractEventDeclaration").alias("outevent", "").create();
      case 25:
        return new ConceptDescriptorBuilder("USML.structure.PutEventBinding").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").children(new String[]{"cbinding"}, new boolean[]{false}).alias("PutEventBinding", "").create();
      case 26:
        return new ConceptDescriptorBuilder("USML.structure.RegionLocalDeclaration").super_("com.mbeddr.core.statements.structure.LocalVariableDeclaration").parents("com.mbeddr.core.statements.structure.LocalVariableDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "USML.structure.IRegion", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "com.mbeddr.core.base.structure.IContainerOfUniqueNames", "USML.structure.IAbstrackBlockContainer").references("initState").children(new String[]{"content"}, new boolean[]{false}).create();
      case 27:
        return new ConceptDescriptorBuilder("USML.structure.RegionType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").alias("region", "").create();
      case 28:
        return new ConceptDescriptorBuilder("USML.structure.SMGlobalDeclaration").super_("com.mbeddr.core.modules.structure.GlobalVariableDeclaration").parents("com.mbeddr.core.modules.structure.GlobalVariableDeclaration", "USML.structure.IStateMachine", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "com.mbeddr.core.base.structure.IContainerOfUniqueNames").children(new String[]{"content"}, new boolean[]{false}).create();
      case 29:
        return new ConceptDescriptorBuilder("USML.structure.SMSafeTerm").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").references("sm_ref").alias("sm_safe_terminate", "").create();
      case 30:
        return new ConceptDescriptorBuilder("USML.structure.SMStart").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").references("sm_ref").alias("sm_start", "").create();
      case 31:
        return new ConceptDescriptorBuilder("USML.structure.SMType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").alias("statemachine", "").create();
      case 32:
        return new ConceptDescriptorBuilder("USML.structure.StateLocalDeclaration").super_("com.mbeddr.core.statements.structure.LocalVariableDeclaration").parents("com.mbeddr.core.statements.structure.LocalVariableDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "USML.structure.IState", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "com.mbeddr.core.base.structure.IContainerOfUniqueNames", "USML.structure.IAbstrackBlockContainer").children(new String[]{"content"}, new boolean[]{false}).alias("", "it is only used under either StateGlobalDecl or StateLocalDecl").create();
      case 33:
        return new ConceptDescriptorBuilder("USML.structure.StateMachineBindingsConfigItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.base.structure.IConfigurationItem").properties("getEventInput_Funcname", "concurrency", "eventLifeline", "preemption", "priority", "smallStepConsistency", "variableLifeline").alias("state machine bindings", "").create();
      case 34:
        return new ConceptDescriptorBuilder("USML.structure.StateMachineConfigItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.base.structure.IConfigurationItem").properties("debugMode", "generateTest").alias("state machines", "use state machines").create();
      case 35:
        return new ConceptDescriptorBuilder("USML.structure.StateMachineSemanticsConfigItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.base.structure.IConfigurationItem").properties("bigStepMaximality", "concurrency", "eventLifeline", "preemption", "priority", "smallStepConsistency", "variableLifeline").alias("state machine semantics", "").create();
      case 36:
        return new ConceptDescriptorBuilder("USML.structure.StateType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").alias("state", "").create();
      case 37:
        return new ConceptDescriptorBuilder("USML.structure.Transition").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement", "USML.structure.ITransition").references("source", "target").children(new String[]{"guard", "action", "triggers"}, new boolean[]{false, false, true}).alias("transition", "").create();
      case 38:
        return new ConceptDescriptorBuilder("USML.structure.TransitionType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
      case 39:
        return new ConceptDescriptorBuilder("USML.structure.TriggerEventReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("var").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"USML.structure.AbstractBlock", "USML.structure.AbstractEventDeclaration", "USML.structure.CFunctionBinding", "USML.structure.CreateEventInstance", "USML.structure.DoBlock", "USML.structure.EntryBlock", "USML.structure.EventArgReference", "USML.structure.EventCall", "USML.structure.EventType", "USML.structure.ExitBlock", "USML.structure.GetEventBinding", "USML.structure.IAbstrackBlockContainer", "USML.structure.IEvent", "USML.structure.IEventScopeProvider", "USML.structure.IRegion", "USML.structure.IRegionScopeProvider", "USML.structure.ISMFullNameProvider", "USML.structure.IState", "USML.structure.IStateMachine", "USML.structure.IStateScopeProvider", "USML.structure.ITransition", "USML.structure.ITransitionProvider", "USML.structure.InEventDeclaration", "USML.structure.LocalEventDeclaration", "USML.structure.OutEventDeclaration", "USML.structure.PutEventBinding", "USML.structure.RegionLocalDeclaration", "USML.structure.RegionType", "USML.structure.SMGlobalDeclaration", "USML.structure.SMSafeTerm", "USML.structure.SMStart", "USML.structure.SMType", "USML.structure.StateLocalDeclaration", "USML.structure.StateMachineBindingsConfigItem", "USML.structure.StateMachineConfigItem", "USML.structure.StateMachineSemanticsConfigItem", "USML.structure.StateType", "USML.structure.Transition", "USML.structure.TransitionType", "USML.structure.TriggerEventReference"};
}
