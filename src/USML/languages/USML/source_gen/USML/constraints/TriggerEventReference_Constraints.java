package USML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class TriggerEventReference_Constraints extends BaseConstraintsDescriptor {
  public TriggerEventReference_Constraints() {
    super("USML.structure.TriggerEventReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("var", new BaseReferenceConstraintsDescriptor("var", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            final List<SNode> events = new ArrayList<SNode>();
            Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAncestors(_context.getEnclosingNode(), null, false), "USML.structure.IEventScopeProvider")).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                ListSequence.fromList(events).addSequence(Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), it, "virtual_getContainedEvents_2093108837558419581", new Object[]{})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return !(SNodeOperations.isInstanceOf(it, "USML.structure.OutEventDeclaration"));
                  }
                }));
              }
            });
            return events;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_dvvt4g_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_dvvt4g_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "3372386639988706011");
}
