package USML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class CreateEventInstance_Constraints extends BaseConstraintsDescriptor {
  public CreateEventInstance_Constraints() {
    super("USML.structure.CreateEventInstance");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("event", new BaseReferenceConstraintsDescriptor("event", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getReferenceNode(), "statemachine", false), "USML.structure.InEventDeclaration", false, new String[]{});
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_9dajzp_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    references.put("statemachine", new BaseReferenceConstraintsDescriptor("statemachine", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getReferenceNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false), "USML.structure.SMGlobalDeclaration", false, new String[]{});
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_9dajzp_a0a1a0a0a1a0b0a2a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_9dajzp_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "1054945346926824966");
  private static SNodePointer breakingNode_9dajzp_a0a1a0a0a1a0b0a2a1 = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "1054945346929648922");
}
