package USML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNodePointer;

public class RegionLocalDeclaration_Constraints extends BaseConstraintsDescriptor {
  public RegionLocalDeclaration_Constraints() {
    super("USML.structure.RegionLocalDeclaration");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("initState", new BaseReferenceConstraintsDescriptor("initState", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.getAncestor(_context.getReferenceNode(), "USML.structure.IRegion", true, false), "virtual_getContainedStates_5600653557317358696", new Object[]{});
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_uijn65_a0a1a0a0a1a0b0a1a3;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    if (SNodeOperations.isInstanceOf(childNode, "com.mbeddr.core.statements.structure.StatementList")) {
      return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(childNode, "com.mbeddr.core.statements.structure.StatementList"), "statements", true)).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.statements.structure.LocalVariableDeclaration") || SNodeOperations.isInstanceOf(it, "USML.structure.IEvent") || SNodeOperations.isInstanceOf(it, "USML.structure.ITransition") || SNodeOperations.isInstanceOf(it, "USML.structure.IState") || SNodeOperations.isInstanceOf(it, "USML.structure.EntryBlock");
        }
      });
    } else {
      return true;
    }
  }

  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "1054945346934614424");
  private static SNodePointer breakingNode_uijn65_a0a1a0a0a1a0b0a1a3 = new SNodePointer("r:71f758a2-801a-4ae6-a7a9-e33b9ff69342(USML.constraints)", "5600653557311942922");
}
